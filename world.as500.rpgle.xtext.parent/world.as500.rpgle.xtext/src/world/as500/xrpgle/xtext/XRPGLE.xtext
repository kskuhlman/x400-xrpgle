grammar world.as500.rpgle.xtext.XRPGLE with org.eclipse.xtext.common.Terminals

generate xRPGLE "http://www.as500.world/xrpgle/xtext/XRPGLE"

Model: {Model}
	('**FREE')?
	statements+=Statement*
;
Statement:
	AbstractCompilerDirective	|
	AbstractControl				|
//	AbstractFileDescription		|
	AbstractDefinition			|
	AbstractCalculation
;

/*******************************************************************************
 * Control Options (H-Specs)
 * 
 **/
AbstractControl:
	'CTL-OPT' keywords+=ControlOption+ ';'
;

ControlOption:
	ControlOptionALLOC		|
	ControlOptionACTGRP		|
	ControlOptionALTSEQ		|
	ControlOptionALWNULL	|		
	ControlOptionAUT		|
	ControlOptionBNDDIR		|
	ControlOptionCCSID		|
	ControlOptionCCSIDCVT	|
	ControlOptionCOPYNEST	|
	ControlOptionCOPYRIGHT	|
	ControlOptionCURSYM		|
	ControlOptionCVTOPT		|
	ControlOptionDCLOPT		|
//			ControlOptionDATEDIT	|
//			ControlOptionDATEFMT	|
	ControlOptionDEBUG		|
	ControlOptionDECEDIT	|
	ControlOptionDECPREC	|
	ControlOptionDFTACTGRP	|
	ControlOptionDFTNAME	|
	ControlOptionENBPFRCOL	|
	ControlOptionEXPROPTS	|
	ControlOptionEXTBININT	|
	ControlOptionFIXNBR		|
	ControlOptionFLTDIV		|
	ControlOptionFORMSALIGN |
	ControlOptionFTRANS		|
	ControlOptionGENLVL		|
	ControlOptionINDENT		|
	ControlOptionINTPREC	|
	ControlOptionLANGID		|
	ControlOptionMAIN		|
	ControlOptionNOMAIN		|
	ControlOptionOPENOPT	|
	ControlOptionOPTIMIZE	|
	ControlOptionOPTION		|
	ControlOptionPGMINFO	|
	ControlOptionPRFDTA		|
	ControlOptionSRTSEQ		|
	ControlOptionSTGMDL		|
	ControlOptionTEXT		|
	ControlOptionTHREAD		|
//			ControlOptionTIMFMT		|
	ControlOptionTRUNCNBR	|
	ControlOptionUSRPRF		|
	ControlOptionVALIDATE
;

// ALLOC - Start ---------------------------------------------------		
ControlOptionALLOC:
	'ALLOC' '(' option=AllocOptions ')'
;
enum AllocOptions:
	STGMDL='*STGMDL'		|
	TERRASPACE='*TERASPACE'	|
	SNGLVL='*SNGLVL'
;
// ALLOC - End -----------------------------------------------------

// ACTGRP - Start ---------------------------------------------------
ControlOptionACTGRP:
	'ACTGRP' '(' option=(ActGrpOptions) ')'
;
ActGrpOptions:
	'*STGMDL' | '*NEW' | '*CALLER' | STRING
;
// ACTGRP - End -----------------------------------------------------

// ALTSEQ - Start ---------------------------------------------------
ControlOptionALTSEQ: {ControlOptionALTSEQ}
	'ALTSEQ' (
		 '(' option=AltSeqOptions ')'
	)?
;
enum AltSeqOptions:
	NONE='*NONE' |
	SRC='*SRC'	 |
	EXT='*EXT'
;
// ALTSEQ - End -----------------------------------------------------

// ALWNULL - Start ---------------------------------------------------
ControlOptionALWNULL: {ControlOptionALWNULL}
	'ALWNULL' (
		 '(' option=AlwNullOptions ')'
	)?
;
enum AlwNullOptions:
	NO='*NO'				|
	INPUTONLY='*INPUTONLY'	|
	USRCTL='*USRCTL'
;
// ALWNULL - End -----------------------------------------------------

// AUT - Start -------------------------------------------------------
ControlOptionAUT:
	'AUT' '(' option=AutOptions ')'
;
AutOptions:
	'*LIBCRTAUT' | '*ALL' | '*CHANGE' | '*USE' | '*EXCLUDE' | STRING
;
// AUT - End --------------------------------------------------------

// BNDDIR - Start ---------------------------------------------------
ControlOptionBNDDIR:
	'BNDDIR' '(' options+=STRING (':' options+=STRING)* ')'
;
// BNDDIR - End -----------------------------------------------------

// CCSID - Start ----------------------------------------------------
ControlOptionCCSID:
	'CCSID' '('( 
		option=( ControlOptionCCSIDExact	|
				 ControlOptionCCSIDChar		|
				 ControlOptionCCSIDGraph	|
				 ControlOptionCCSIDUcs2
		)
	)')'
;
ControlOptionCCSIDExact:
	parm1='*EXACT'
;
ControlOptionCCSIDChar:
	parm1='*CHAR' ':' parm2=CCSIDCharOptions
;
CCSIDCharOptions:
	'*JOBRUN' | '*JOBRUNMIX' | '*UTF8' | '*HEX' | INT
;
ControlOptionCCSIDGraph:
	parm1='*GRAPH' ':' parm2=CCSIDGraphOptions
;
CCSIDGraphOptions:
	'*JOBRUN' | '*SRC' | '*HEX' | '*IGNORE' | INT
;
ControlOptionCCSIDUcs2:
	parm1='*UCS2' ':' parm2=CCSIDUcs2Options
;
CCSIDUcs2Options:
	'*UTF16' | INT
;
// CCSID - End ------------------------------------------------------

// CCSIDCVT - Start -------------------------------------------------
ControlOptionCCSIDCVT:
	'CCSIDCVT' '(' option=(CCSIDCVTOptions) ')'
;
enum CCSIDCVTOptions:
	EXCP='*EXCP' |
	LIST='*LIST'
;
// CCSIDCVT - End ---------------------------------------------------

ControlOptionCOPYNEST:
	'COPYNEST' '(' option=INT ')'
;
ControlOptionCOPYRIGHT:
	'COPYRIGHT' '(' option=STRING ')'
;
ControlOptionCURSYM:
	'CURSYM' '(' option=STRING ')'
;
// CVTOPT - Start ---------------------------------------------------
ControlOptionCVTOPT:
	'CVTOPT' '(' options+=CvtOptOptions (':' options+=CvtOptOptions)* ')'
;
enum CvtOptOptions:
	DATETIME='*DATETIME'		|
	NODATETIME='*NODATETIME'	|
	GRAPHIC='*GRAPHIC'			|
	NOGRAPHIC='*NOGRAPHIC'		|
	VARCHAR='*VARCHAR'			|
	NOVARCHAR='*NOVARCHAR'		|
	VARGRAPHIC='*VARGRAPHIC'	|
	NOVARGRAPHIC='*NOVARGRAPHIC'
;
// CVTOPT - End -----------------------------------------------------

// DCLOPT - Start ---------------------------------------------------
ControlOptionDCLOPT:
	'DCLOPT' '(' option='*NOCHGDSLEN' ')'
;
// DCLOPT - End -----------------------------------------------------

//		ControlOptionDATEDIT:
//			'DATEDIT' '(' fmt='TODO' sep='/' ')'
//		;
//		ControlOptionDATEFMT:
//			'DATFMT' '(' fmt='TODO' sep='/' ')'
//		;
//		
// DEBUG - Start ----------------------------------------------------
ControlOptionDEBUG: {ControlOptionDEBUG}
	'DEBUG' (
		 '(' option=DebugOptions ')'
	)?
;
enum DebugOptions:
	INPUT='*INPUT'	|
	DUMP='*DUMP'	|
	XMLSAX='*XMLSAX'|
	NO='*NO'		|
	YES='*YES'
;
// DEBUG - End ------------------------------------------------------

ControlOptionDECEDIT:
	'DECEDIT' '(' option=( '*JOBRUN' | STRING ) ')'
;
ControlOptionDECPREC:
	'DECPREC' '(' option=INT ')'
;
ControlOptionDFTACTGRP:
	'DFTACTGRP' '(' option=('*YES' | '*NO' ) ')'
;
ControlOptionDFTNAME:
	'DFTNAME' '(' option=STRING ')'
;
ControlOptionENBPFRCOL:
	'ENBPFRCOL' '(' option=('*PEP' | '*ENTRYEXIT' | '*FULL') ')'
;
ControlOptionEXPROPTS:
	'EXPROPTS' '(' option=('*MAXDIGITS' | '*RESDECPOS') ')'
;
ControlOptionEXTBININT: {ControlOptionEXTBININT}
	'EXTNININT' ( '(' option=( '*NO' | '*YES') ')' )?
;
ControlOptionFIXNBR:
	'FIXNBR' '('
		option=( ('*ZONED'|'*NOZONED') | ('*INPUTPACKED'|'*NOINPUTPACKED') )
	')'
;
ControlOptionFLTDIV: {ControlOptionFLTDIV}
	'FLTDIV' ( '(' option=( '*NO' | '*YES') ')' )?
;
ControlOptionFORMSALIGN: {ControlOptionFORMSALIGN}
	'FORMSALIGN' ( '(' option=( '*NO' | '*YES') ')' )?
;
ControlOptionFTRANS: {ControlOptionFTRANS}
	'FTRANS' ( '(' option=( '*NONE' | '*SRC' )')')?
;
ControlOptionGENLVL:
	'GENLVL' '(' option=INT ')'
;
ControlOptionINDENT:
	'INDENT' '(' option=( '*NONE' | STRING) ')'
;
ControlOptionINTPREC:
	'INTPREC' '(' option=INT ')'
;
ControlOptionLANGID:
	'LANGID' '(' option=('*JOBRUN' | '*JOB' | STRING) ')'
;	
ControlOptionMAIN:
	'MAIN' '(' option=ID ')'
;
ControlOptionNOMAIN:
	option='NOMAIN'
;
ControlOptionOPENOPT:
	'OPENOPT' '(' option=( ('*INZOFL' | '*NOINZOFL') | ('*CVTDATA' | '*NOCVTDATA') ) ')'
;
ControlOptionOPTIMIZE:
	'OPTIMIZE' '(' option=('*NONE' | '*BASIC' | '*FULL') ')'
;
ControlOptionOPTION:
	'OPTION' '(' options+=OptionOptions (':' options+=OptionOptions)* ')'
;
enum OptionOptions:
	XREF='*XREF'			|
	NOXREF='*NOXREF'		|
	SECLVL='*SECLVL'		|
	NOSECLVL='*NOSECLVL'	|
	SHOWCPY='*SHOWCPY'		|
	NOSHOWCPY='*NOSHOWCPY'	|
	EXPDDS='*EXPDDS'		|
	NOEXPDDS='*NOEXPDDS'	|
	EXP='*EXT'				|
	NOEXP='*NOEXT'			|
	SHOWSKP='*SHOWSKP'		|
	NOSHOWSKP='*NOSHOWSKP'	|
	SRCSTMT='*SRCSTMT'		|
	NOSRCSTMT='*NOSRCSTMT'	|
	DEBUGIO='*DEBUG'		|
	NODEBUGIO='*NODEBUG'	|
	UNREF='*UNREF'			|
	NOUNREF='*NOUNREF'
;
ControlOptionPGMINFO:
	'PGMINFO' '(' option=( '*PCML' | '*NO' | '*DCLCASE' ) (':' module?='*MODULE')? ')'
;
ControlOptionPRFDTA:
	'PRFDTA' '(' option=( '*NOCOL' | '*COL' ) ')'
;
ControlOptionSRTSEQ:
	'SRTSEQ' '(' option=('*HEX' | '*JOB' | '*JOBRUN' | '*LANGIDUNQ' | '*LANGIDSHR' | STRING) ')'
;
ControlOptionSTGMDL:
	'STGMDL' '(' option=('*INHERIT' | '*SNGLVL' | '*TERASPACE') ')'
;
ControlOptionTEXT:
	'TEXT' '(' option=('*SRCMBRTXT' | '*BLANK' | STRING) ')'
;
ControlOptionTHREAD:
	'THREAD' '(' option=('*CONCURRENT' | '*SERIALIZE') ')'
;
//		ControlOptionTIMFMT:
//			'TIMFMT' '(' fmt='TODO' sep='/' ')'
//		;
ControlOptionTRUNCNBR:
	'TRUNCNBR' '(' option=('*YES' | '*NO') ')'
;
ControlOptionUSRPRF:
	'USRPRF' '(' option=('*USER' | '*OWNER') ')'
;
// VALIDATE - Start -------------------------------------------------
ControlOptionVALIDATE:
	// Method 1:
	'VALIDATE' '(' option='*NODATETIME' ')'
;
// VALIDATE - End ---------------------------------------------------

//------------------------------------------------------------------------------

/*******************************************************************************
 * File Descriptions (F-Specs)
 * 
 **/
AbstractFileDescription:
	FileDescription
;
FileDescription:
	'DCL-F' name=ID keywords+=(GenericKeyword)* ';'
;
//--------------------------------------------------------------------------

/******************************************************************************
 * Definition (D-Specs)
 *
 **/
AbstractDefinition:
	StandAloneField |
	NamedConstant	|
	DataStructure	|
	Prototype		|
	ProcedureDef	|
	ProcedureInterface
;

StandAloneField:
	'DCL-S' name=ID datatype=AbstractDataType keywords+=(GenericKeyword)* ';'
;

NamedConstant:
	'DCL-C' name=ID (
		('CONST' '(' (const=NamedConstantValue) ')')
		|
		const=NamedConstantValue
	) ';'
;

DataStructure:
   'DCL-DS' name=OptionalID keywords+=(GenericKeyword)* ';'
   subFields+=(SubField | DataStructure)*
   'END-DS' ';'
;

SubField:
	('DCL-SUBF')? name=OptionalID datatype=AbstractDataType keywords+=(GenericKeyword)* ';' 
;

Prototype:
	'DCL-PR' name=ID datatype=AbstractDataType keywords+=(GenericKeyword)* ';'
	parms+=(PrototypedParameter)*
	'END-PR' ';'
;

ProcedureDef:
	'DCL-PROC' name=ID keywords+=(GenericKeyword)* ';'
	declaration+=(AbstractDeclaration)*
	statements+=AbstractCalculation*
	onerror=ProcedureDefOnERROR
	'END-PROC' ';'
;
ProcedureDefOnERROR:
	{ProcedureDefOnERROR}
	'ON-EXIT' ';'
	statements+=AbstractCalculation*
;

ProcedureInterface:
	'DCL-PI' name=OptionalID datatype=AbstractDataType keywords+=(GenericKeyword)* ';'
	parms+=(PrototypedParameter)*
	'END-PI' ';'
;

PrototypedParameter:
	('DCL-PARM')? name=OptionalID datatype=AbstractDataType keywords+=(GenericKeyword)* ('CONST')? ';'
;
//--------------------------------------------------------------------------

/******************************************************************************
 * Expressions & Calculations (C-Specs)
 * 
 */
 
AbstractCalculation:
	CalculationAssignment	 |
	CalculationProcedureCall |
	CalculationReturn		 |
	AbstactCalculationBlock
;

CalculationAssignment:
//  VariableAssignment:
//  The assignment operators are:
//	-->	  = The expression is assigned to the target
//	-->	 += The expression is added to the target
//	-->	 -= The expression is subtracted from the target
//	-->  *= The target is multiplied by the expression
//	-->	 /= The target is divided by the expression
//	-->	**= The target is assigned the target raised to the power of the expression
	eval?=('EVAL')?
	tgtvar=[StandAloneField]
	op=( '=' | '+=' | '-=' | '*=' | '/=' | '**=' )
	exp=Expression ';'
;

CalculationProcedureCall: //ProcedureCallStatement:
	callp?=('CALLP')?
	call=ProcedureCall ';'
;

CalculationReturn:
	{CalculationReturn}
	'RETURN' (exp=Expression)? ';'
;
AbstactCalculationBlock: //AbstractStatement:
	CalculationBlockDO		|
	CalculationBlockFOR		|
	CalculationBlockIF		|
	CalculationBlockMONITOR	|
	CalculationBlockSELECT	|
	CalculationBlockSUBROUTINE
;
CalculationBlockDO: {CalculationBlockDO} 
	(type='DOW'| type='DOU') condition=Expression ';'
	statements+=AbstractCalculation*
	'ENDDO' ';'
;
CalculationBlockFOR:
// https://www.ibm.com/support/knowledgecenter/ssw_ibm_i_73/rzasd/zzfor.htm
// Note for future...
//		If it becomes important to be able to specify BY/TO in any sequence.
//		Just add another optional "ForIncrement" rule after the "ForLimit" rule,
//		and then validate in code that the ForIncrementer only occurs once.
//		I really hope that works, but being able to specify it in diff sequence,
//		is not my preference.
	'FOR' index=ForIndex (increment=ForIncrement)? (limit=ForLimit)? ';'
	statements+=AbstractCalculation*
	'ENDFOR' ';'
;
		ForIndex:
			indexname=[AssignableVariable] ( op=( '=' | '+=' | '-=' | '*=' | '/=' | '**=' ) exp=Expression)?
		;
		ForIncrement:
			'BY' by=Expression
		;
		ForLimit:
			op=('TO' | 'DOWNTO') to=Expression
		;
CalculationBlockIF:
	'IF' condition=Expression ';'
	 statements+=AbstractCalculation*
     elseifs+=CalculationBlockIfELSEIF*
     else=CalculationBlockIfELSE?
	'ENDIF' ';'
;
CalculationBlockIfELSEIF:
	'ELSEIF' condition=Expression ';'
	statements+=AbstractCalculation*
;
CalculationBlockIfELSE:
	{CalculationBlockIfELSE} 'ELSE' ';'
	statements+=AbstractCalculation*
;
CalculationBlockMONITOR:
	{CalculationBlockMONITOR} 'MONITOR' ';'
	statements+=AbstractCalculation*
	onerror=CalculationBlockMonitorONERROR?
	'ENDMON' ';'
;
CalculationBlockMonitorONERROR:
	{CalculationBlockMonitorONERROR} 'ON-ERROR' ';'
	statements+=AbstractCalculation*
;	
CalculationBlockSELECT:
	'SELECT' ';'
	whens+=CalculationBlockSelectWHEN+
	other=CalculationBlockSelectOTHER?
	'ENDSL' ';'
;
CalculationBlockSelectWHEN:
	'WHEN' condition=Expression ';'
	statements+=AbstractCalculation*
;
CalculationBlockSelectOTHER:
	{CalculationBlockSelectOTHER}
	'OTHER' ';'
	statements+=AbstractCalculation*
;
CalculationBlockSUBROUTINE:
	'BEGSR' name=ID ';'
	statements+=AbstractCalculation*
	'ENDSR' ';'
;

/* Expressions Precedence: 
 * 	--> ()
 * 	--> Built-in functions, user-defined functions
 * 	--> unary +, unary -, NOT
 * 	--> **
 * 	--> *, /
 * 	--> binary +, binary -
 * 	--> =, <>, >, >=, <, <=
 * 	--> AND
 * 	--> OR
 * 
 ***/
Expression: Or;
Or returns Expression:
	And (
		{Or.left=current} 'OR'
		right=And
	)*;
And returns Expression:
	Comparison (
		{And.left=current} 'AND'
		right=Comparison
	)*;
Comparison returns Expression:
	BinaryPlusOrMinus (
		{Comparison.left=current} op=('=' | '<>' | '>=' | '<=' | '>' | '<')
		right=BinaryPlusOrMinus
	)*;
BinaryPlusOrMinus returns Expression:
	MulOrDiv (
		({BinPlus.left=current} '+' | {BinMinus.left=current} '-')
		right=MulOrDiv
	)*;
MulOrDiv returns Expression:
	Exponent (
		({MulOrDiv.left=current} op=('*' | '/'))
		right=Exponent
	)*;
Exponent returns Expression:
	UnaryPlusMinusOrNot (
		{Exponent.left=current} '**'
		right=UnaryPlusMinusOrNot
	)?;
UnaryPlusMinusOrNot returns Expression:
	 (
	 ({UnaryPlus}'+' right=FunctionExp | {UnaryMinus}'-'  right=FunctionExp) | ('NOT' right=FunctionExp)
	
	) | FunctionExp;
FunctionExp returns Expression:
	Primary | (
		(func=ProcedureCall)
	);
Primary returns Expression:
	'(' Expression ')' |
	Atomic
	;
Atomic returns Expression:
	varorval=[VariableOrConstDef]	|
	{IntConstant} value=INT			|
	{StringConstant} value=STRING	|
	{BooleanConstant} value=BOOL
	;
//--------------------------------------------------------------------------

/******************************************************************************
 * Datatypes
 **/
AbstractDataType:
// www.ibm.com/support/knowledgecenter/en/ssw_ibm_i_72/rzasd/dtdf.htm
	CharacterDataTypes	|
	NumericDataTypes	|
	DateTimeDataTypes
;

CharacterDataTypes:
// www.ibm.com/support/knowledgecenter/ssw_ibm_i_72/rzasd/chartype.htm
	DataTypeCHAR		|
	DataTypeVARCHAR		|
	DataTypeGRAPH		|
	DataTypeVARGRAPH	|
	DataTypeUCS2		|
	DataTypeVARUCS2		|	
	DataTypeIND
;

NumericDataTypes:
// www.ibm.com/support/knowledgecenter/ssw_ibm_i_72/rzasd/dnum.htm
//	KeywordBINDEC	- Not Supported By XRPGLE, use alternative like INT
//	KeywordFLOAT	- @Christoff has never needed to use, thus not included in v1 of XRPGLE
	DataTypeINT		|
	DataTypePACKED	|
	DataTypeUNS		|
	DataTypeZONED
;

DateTimeDataTypes:
//	DataTypeDATE		|
//	DataTypeTIME		|
	DataTypeTIMESTAMP
;

DataTypeCHAR:
	'CHAR' '(' length=INT ')';
DataTypeVARCHAR:
	'VARCHAR'  '(' length=INT ( separator?=':' bytes=INT)? ')';
DataTypeGRAPH:
	'GRAPH' '(' length=INT ')';
DataTypeVARGRAPH:
	'VARGRAPH' '(' length=INT ( separator?=':' bytes=INT)? ')';
DataTypeUCS2:
	'UCS2' '(' length=INT ')';
DataTypeVARUCS2:
	'VARUCS2' '(' length=INT ( separator?=':' bytes=INT)? ')';
DataTypeIND: {KeywordIND}
	'IND' ;
DataTypeINT:
	'INT' '(' digits=INT ')';
DataTypePACKED:
	'PACKED' '(' digits=INT (':' decpos=INT)? ')';
DataTypeUNS:
	'UNS' '(' digits=INT ')';
DataTypeZONED:
	'ZONED' '(' digits=INT (':' decpos=INT)? ')';
//DataTypeDATE: {DataTypeDATE}
//	'DATE' ('(' format=DATFMT (separator=DATSEP)? ')')?;
//DataTypeTIME: {DataTypeTIME}
//	'TIME' ('(' format=TIMFMT (separator=TIMSEP)? ')')?;
DataTypeTIMESTAMP: {DataTypeTIMESTAMP}
	'TIMESTAMP' ('(' fractsec=INT ')')?; //fractional_seconds
AbstractDeclaration:
	FileDescription			| 
	StandAloneField			|
	NamedConstant			|
	DataStructure			|
	ProcedureInterface		|
	Prototype
;

ProcedureCall:
	name=[ProcedureCallRef]
	('('
 		(params+=Expression (':' params+=Expression)*)?
 	')')
;
ProcedureCallRef:
   Prototype | ProcedureDef
;

NamedConstantValue:
	{IntConstant}	  value = INT	 |
	{StringConstant}  value = STRING |
	{BooleanConstant} value = BOOL
;

GenericKeyword:
	(
		keyword=ID ('(' 
			params+=GenericKeywordParms (':' params+=GenericKeywordParms)*
		')')?
	)
;
GenericKeywordParms:
	STRING|BOOL|SPLAT_OPERATOR|ID|INT
;

VariableOrConstDef:
	StandAloneField | NamedConstant
;

AssignableVariable:
	StandAloneField
;
//KeywordLIKE:
//	'LIKE' '('
//		refs+=(ID) ('.' refs+=(ID))*
////	 	( ':' lengthadjustment=INT )?
// 	')';
//KeywordLIKEDS:
//	'LIKEDS' '('
//	    ref=[DataStructure] 
//	')';

OptionalID:
	ID |'*N'
;

IFSPath:
	'IFSPath' //TODO
;
QSYSPath:
	'QSYSPath' //TODO
;
//--------------------------------------------------------------------------

/*******************************************************************************
 * Compiler Directive  
 * https://www.ibm.com/support/knowledgecenter/ssw_ibm_i_72/rzasd/compdir.htm
 ***/
AbstractCompilerDirective:
	CompilerDirectiveTITLE  		|
	CompilerDirectiveEJECT  		|
	CompilerDirectiveSPACE  		|
	CompilerDirectiveINCLUDEorCOPY	|
	CompilerDirectiveDEFINE			|
	CompilerDirectiveUNDEFINE		|
	CompilerDirectiveBlockIF		|
	CompilerDirectiveEOF
//	CompilerDirectiveSET	//TODO
//	CompilerDirectiveRESTOR	//TODO
;
CompilerDirectiveTITLE:
	'/TITLE' title=ID
;
CompilerDirectiveEJECT:
	{CompilerDirectiveEJECT}
	'/EJECT'
;
CompilerDirectiveSPACE:
	{CompilerDirectiveSPACE}
	'/SPACE' spaces=INT
;
CompilerDirectiveINCLUDEorCOPY:
	dc=('/COPY' | '/INCLUDE') path=(IFSPath|QSYSPath)
;
CompilerDirectiveDEFINE:
	'/DEFINE' name=ID
;
CompilerDirectiveUNDEFINE:
	'/UNDEFINE' name=ID
;
CompilerDirectiveEOF:
	{CompilerDirectiveEOF}
	CD_EOF //'/EOF'
;
CompilerDirectiveBlockIF:
	'/IF' (not?='NOT')? 'DEFINED' '(' cond=CompilerDirectiveConditions ')'
	 statements+=Statement*
     elseifs+=CompilerDirectiveBlockIfELSEIF*
     else=CompilerDirectiveBlockIfELSE?
	'/ENDIF'
;
CompilerDirectiveBlockIfELSEIF:
	'/ELSEIF' (not?='NOT')? 'DEFINED' '(' cond=CompilerDirectiveConditions ')'
	statements+=Statement*
;
CompilerDirectiveBlockIfELSE:
	{CompilerDirectiveBlockIfELSE} '/ELSE'
	statements+=Statement*
;
CompilerDirectiveConditions:
	value= ID					|
	value='*ILERPG'				|
	value='*CRTBNDRPG'			|
	value='*CRTRPGMOD'			|
	value='*THREAD_CONCURRENT'	|
	value='*THREAD_SERIALIZE'	|
	value=CD_CONDITIONS_VERSION
;
//--------------------------------------------------------------------------

/******************************************************************************
 * Terminals
 ***/

terminal BOOL:
	'*ON' | '*OFF'
;
terminal CD_CONDITIONS_VERSION:
	'^'?'*V'('0'..'9')'R'('0'..'9')'M'('0'..'9')
;
terminal CD_EOF:
	'/'('e'|'E')('o'|'O')('f'|'F')
;

//terminal SS_FREE:
//	('**FREE' | '**END-FREE' | '/FREE' | '/END-FREE')
//;

//terminal fragment DIGIT: ('0'..'9');
//terminal UNS returns ecore::EInt: DIGIT+;
//terminal INT returns ecore::EInt: '^'?('+'|'-')?DIGIT+;
//terminal NUM returns ecore::EDouble: ('-'|'+')? DIGIT* '.' DIGIT+;

terminal SPLAT_OPERATOR: ('*')('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

@Override 
terminal ID: //https://www.ibm.com/support/knowledgecenter/ssw_ibm_i_73/rzasd/symbol9.htm#symbol9
	'^'?('a'..'z'|'A'..'Z'|'$'|'#'|'@') ('a'..'z'|'A'..'Z'|'$'|'#'|'@'|'_'|'0'..'9')*
;

@Override 
terminal STRING		: "'" (!"'"|"''")* "'";

terminal EXEC_SQL	: ('e'|'E')('x'|'X')('e'|'E')('c'|'C') -> ';';

//------------------------------------------------------------------------------
